import java.util.*;

public class BFS{
    private static List<List<Integer>> res = new ArrayList<>();

    static class Node {
        int val;
        List<Node> neighbors;
        int flag;

        public Node() {
        };

        public Node(int _val, List<Node> _neighbors, int _flag) {
            val = _val;
            neighbors = _neighbors;
            flag = _flag;
        }
    }

    public static List<List<Integer>> bfs(Node root) {
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            int len = queue.size();
            List<Integer> singleLevel = new ArrayList<>();
            while (len > 0) {
                Node tmp = queue.poll();
                singleLevel.add(tmp.val);
                len--;
                for (int i = 0; i < tmp.neighbors.size(); i++) {
                    if(tmp.neighbors.get(i).flag == 0){
                        queue.add(tmp.neighbors.get(i));
                        tmp.neighbors.get(i).flag = 1;
                    }
                }
            }
            res.add(singleLevel);
        }
        return res;
    }

    public static void main(String[] args) {
        List<Node> na = new ArrayList<>();
        List<Node> nb = new ArrayList<>();
        List<Node> nc = new ArrayList<>();
        Node a = new Node(1, na, 0);
        Node b = new Node(2, nb, 0);
        Node c = new Node(3, nc, 0);
        na.add(b);
        na.add(c);
        nb.add(c);
        System.out.println(bfs(a));
    }
}